// Code generated by mockery. DO NOT EDIT.

package aws

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSecretStore is an autogenerated mock type for the SecretStore type
type MockSecretStore struct {
	mock.Mock
}

type MockSecretStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretStore) EXPECT() *MockSecretStore_Expecter {
	return &MockSecretStore_Expecter{mock: &_m.Mock}
}

// GetSecretValue provides a mock function with given fields: ctx, key
func (_m *MockSecretStore) GetSecretValue(ctx context.Context, key string) (*string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretValue")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretStore_GetSecretValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretValue'
type MockSecretStore_GetSecretValue_Call struct {
	*mock.Call
}

// GetSecretValue is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockSecretStore_Expecter) GetSecretValue(ctx interface{}, key interface{}) *MockSecretStore_GetSecretValue_Call {
	return &MockSecretStore_GetSecretValue_Call{Call: _e.mock.On("GetSecretValue", ctx, key)}
}

func (_c *MockSecretStore_GetSecretValue_Call) Run(run func(ctx context.Context, key string)) *MockSecretStore_GetSecretValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecretStore_GetSecretValue_Call) Return(_a0 *string, _a1 error) *MockSecretStore_GetSecretValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretStore_GetSecretValue_Call) RunAndReturn(run func(context.Context, string) (*string, error)) *MockSecretStore_GetSecretValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretStore creates a new instance of MockSecretStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretStore {
	mock := &MockSecretStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
