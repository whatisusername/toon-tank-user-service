// Code generated by mockery. DO NOT EDIT.

package aws

import (
	context "context"

	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockCognitoAuthService is an autogenerated mock type for the CognitoAuthService type
type MockCognitoAuthService struct {
	mock.Mock
}

type MockCognitoAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCognitoAuthService) EXPECT() *MockCognitoAuthService_Expecter {
	return &MockCognitoAuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, clientId, clientSecret, username, password
func (_m *MockCognitoAuthService) Login(ctx context.Context, clientId string, clientSecret string, username string, password string) (*CognitoToken, error) {
	ret := _m.Called(ctx, clientId, clientSecret, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *CognitoToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*CognitoToken, error)); ok {
		return rf(ctx, clientId, clientSecret, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *CognitoToken); ok {
		r0 = rf(ctx, clientId, clientSecret, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CognitoToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, clientId, clientSecret, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockCognitoAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - clientSecret string
//   - username string
//   - password string
func (_e *MockCognitoAuthService_Expecter) Login(ctx interface{}, clientId interface{}, clientSecret interface{}, username interface{}, password interface{}) *MockCognitoAuthService_Login_Call {
	return &MockCognitoAuthService_Login_Call{Call: _e.mock.On("Login", ctx, clientId, clientSecret, username, password)}
}

func (_c *MockCognitoAuthService_Login_Call) Run(run func(ctx context.Context, clientId string, clientSecret string, username string, password string)) *MockCognitoAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockCognitoAuthService_Login_Call) Return(_a0 *CognitoToken, _a1 error) *MockCognitoAuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAuthService_Login_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*CognitoToken, error)) *MockCognitoAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ParseUserInfo provides a mock function with given fields: idToken
func (_m *MockCognitoAuthService) ParseUserInfo(idToken *jwt.Token) (*CognitoUserInfo, error) {
	ret := _m.Called(idToken)

	if len(ret) == 0 {
		panic("no return value specified for ParseUserInfo")
	}

	var r0 *CognitoUserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (*CognitoUserInfo, error)); ok {
		return rf(idToken)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) *CognitoUserInfo); ok {
		r0 = rf(idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CognitoUserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAuthService_ParseUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseUserInfo'
type MockCognitoAuthService_ParseUserInfo_Call struct {
	*mock.Call
}

// ParseUserInfo is a helper method to define mock.On call
//   - idToken *jwt.Token
func (_e *MockCognitoAuthService_Expecter) ParseUserInfo(idToken interface{}) *MockCognitoAuthService_ParseUserInfo_Call {
	return &MockCognitoAuthService_ParseUserInfo_Call{Call: _e.mock.On("ParseUserInfo", idToken)}
}

func (_c *MockCognitoAuthService_ParseUserInfo_Call) Run(run func(idToken *jwt.Token)) *MockCognitoAuthService_ParseUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jwt.Token))
	})
	return _c
}

func (_c *MockCognitoAuthService_ParseUserInfo_Call) Return(_a0 *CognitoUserInfo, _a1 error) *MockCognitoAuthService_ParseUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAuthService_ParseUserInfo_Call) RunAndReturn(run func(*jwt.Token) (*CognitoUserInfo, error)) *MockCognitoAuthService_ParseUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, clientId, clientSecret, username, password, email
func (_m *MockCognitoAuthService) SignUp(ctx context.Context, clientId string, clientSecret string, username string, password string, email string) error {
	ret := _m.Called(ctx, clientId, clientSecret, username, password, email)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, clientId, clientSecret, username, password, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCognitoAuthService_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockCognitoAuthService_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - clientSecret string
//   - username string
//   - password string
//   - email string
func (_e *MockCognitoAuthService_Expecter) SignUp(ctx interface{}, clientId interface{}, clientSecret interface{}, username interface{}, password interface{}, email interface{}) *MockCognitoAuthService_SignUp_Call {
	return &MockCognitoAuthService_SignUp_Call{Call: _e.mock.On("SignUp", ctx, clientId, clientSecret, username, password, email)}
}

func (_c *MockCognitoAuthService_SignUp_Call) Run(run func(ctx context.Context, clientId string, clientSecret string, username string, password string, email string)) *MockCognitoAuthService_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockCognitoAuthService_SignUp_Call) Return(_a0 error) *MockCognitoAuthService_SignUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCognitoAuthService_SignUp_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) error) *MockCognitoAuthService_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: ctx, userPoolId, tokenString
func (_m *MockCognitoAuthService) ValidateToken(ctx context.Context, userPoolId string, tokenString string) (*jwt.Token, error) {
	ret := _m.Called(ctx, userPoolId, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*jwt.Token, error)); ok {
		return rf(ctx, userPoolId, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *jwt.Token); ok {
		r0 = rf(ctx, userPoolId, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userPoolId, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAuthService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockCognitoAuthService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userPoolId string
//   - tokenString string
func (_e *MockCognitoAuthService_Expecter) ValidateToken(ctx interface{}, userPoolId interface{}, tokenString interface{}) *MockCognitoAuthService_ValidateToken_Call {
	return &MockCognitoAuthService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, userPoolId, tokenString)}
}

func (_c *MockCognitoAuthService_ValidateToken_Call) Run(run func(ctx context.Context, userPoolId string, tokenString string)) *MockCognitoAuthService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCognitoAuthService_ValidateToken_Call) Return(_a0 *jwt.Token, _a1 error) *MockCognitoAuthService_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAuthService_ValidateToken_Call) RunAndReturn(run func(context.Context, string, string) (*jwt.Token, error)) *MockCognitoAuthService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCognitoAuthService creates a new instance of MockCognitoAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCognitoAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCognitoAuthService {
	mock := &MockCognitoAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
