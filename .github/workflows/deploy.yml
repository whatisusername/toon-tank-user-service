name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to deploy to'
        type: choice
        options:
          - us-west-2
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - dev
          - stag
          - prod
      lambda_name:
        description: 'Name of the lambda function to deploy'
        required: true
        type: string
        default: 'userAuthHandler'
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-west-2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  TF_LOG: INFO

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ENVIRONMENT }}/toontank
          IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_name || github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./deployments/docker/Dockerfile .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"
      - name: Terraform Init
        run: terraform -chdir=deployments/terraform init -backend-config="key=$ENVIRONMENT/lambda/${{ github.event.inputs.lambda_name }}/terraform.tfstate"
      - name: Terraform Apply
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 2
          retry_on_exit_code: 1
          retry_wait_seconds: 5
          command: terraform -chdir=deployments/terraform apply -var "env=${{ env.ENVIRONMENT }}" -auto-approve
